version: '3.9'
x-airflow-common:
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.

  &airflow-common
  build: ./airflow/
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://${SQL_DB_USER}:${SQL_DB_PW}@postgres/airflow'
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://${SQL_DB_USER}:${SQL_DB_PW}@postgres/airflow'
    AIRFLOW__CELERY__RESULT_BACKEND: 'db+postgresql://${SQL_DB_USER}:${SQL_DB_PW}@postgres/airflow'
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:- package1 package2 package3 }

  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/ingestion-volume-dag-airflow:/opt/airflow/dag_generated_configs
    - ${AIRFLOW_PROJ_DIR:-.}/ingestion-volume-tmp:/tmp
    - /var/run/docker.sock:/var/run/docker.sock
  user: root # "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - app_net
  env_file:
    - ./airflow/.env

services:

  fileserver:
    build:
      context: ./fileserver
      dockerfile: Dockerfile
    container_name: fileserver
    volumes:
      - ./fileserver/uploads:/app/uploads
      - ./fileserver/http_server.py:/app/http_server.py
    ports:
      - "8085:8080"
    networks:
      - app_net

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    volumes:
      - ./airflow/airflow.cfg:/opt/airflow/airflow.cfg
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "http://localhost:8080/health"
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      # <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  postgres:
    image: postgres:13
    container_name: ${SQL_CONTAINER_NAME:-postgres}
    environment:
      POSTGRES_USER: ${SQL_DB_USER}
      POSTGRES_PASSWORD: ${SQL_DB_PW}
      POSTGRES_MULTIPLE_DATABASES: mlflow,airflow
    ports:
      - ${SQL_DB_PORT:-5433}:5432
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./postgres/pg-init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - app_net

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - app_net
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio:/data
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    command: server --console-address ":9001" /data
    networks:
      - app_net

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 2G
      # storage:
      #   journal:
      #     enabled: true
      #   wiredTiger:
      #     engineConfig:
      #       cacheSizeGB: 2
      #       maxCacheOverflowFileSizeGB: 2
      #   inMemory:
      #     engineConfig:
      #       inMemorySizeGB: 2
    volumes:
      - ./mongodb:/data/db
    networks:
      - app_net
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/?authSource=admin
    networks:
      - app_net

  mlflow:
    restart: always
    build: ./mlflow
    image: mlflow_server
    container_name: mlflow_server
    ports:
      - 5001:5001
    env_file:
      - .env
    environment:
      - BACKEND=postgresql://${SQL_DB_USER}:${SQL_DB_PW}@${SQL_CONTAINER_NAME:-postgres}:5432/${MLFLOW_DB_NAME}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${MLFLOW_ARTIFACT_BUCKET_NAME}
    volumes:
      - mlrun_data:/mlruns
    command:
      - sh
      - -c
      - mlflow server --port 5001 --host 0.0.0.0 --backend-store-uri $${BACKEND} --default-artifact-root s3://${MLFLOW_ARTIFACT_BUCKET_NAME}
    depends_on:
      - postgres
    networks:
      - app_net
    # # For Local
    # chatbot:
    #   build:
    #     context: ./app
    #     dockerfile: ./local/Dockerfile
    #   container_name: chatbot
    #   environment:
    #     - LLM_HOST=llm
    #     - LLM_PORT=6060
    #   ports:
    #     - 8860:7860
    #   volumes:
    #     - ./app:/app
    #   networks:
    #     - app_net
    #   stdin_open: true # docker run -i
    #   tty: true # docker run -t
    #   # entrypoint: python -m local.bot_local
    # For API
  chatbot:
    build:
      context: ./app
      dockerfile: ./api/Dockerfile
    container_name: chatbot
    environment:
      - LLM_HOST=llm
      - LLM_PORT=6060
    ports:
      - 8860:7860
    volumes:
      - ./app:/app
    networks:
      - app_net
    entrypoint: python -m api.main

  llm:
    build:
      context: ./llm
      dockerfile: ./Dockerfile
    ports:
      - 7860:7860 # for local bot (backend + frontend)
      - 6060:6060 # for backend api
    runtime: nvidia
    image: llm
    container_name: llm
    # To run the terminal: /bin/bash. To run the backend: cd src && python -m bot_backend
    entrypoint: /bin/bash -c "cd src && /bin/bash" # python -m bot_backend"
    volumes:
      - ./llm:/app/
    networks:
      - app_net
    stdin_open: true # docker run -i
    tty: true # docker run -t
    depends_on:
      - minio
      - mlflow
      - chroma

  chroma:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: chroma
    volumes:
      #  - ./chroma/index_data:/chroma/.chroma/index
      - ./chroma/index_data:/chroma/chroma
    command: uvicorn chromadb.app:app --workers 1 --host 0.0.0.0 --port 8000  --proxy-headers --reload
    environment:
      - IS_PERSISTENT=TRUE
      - ALLOW_RESET=TRUE
    ports:
      - 8000:8000
    networks:
      - app_net
volumes:
  ingestion-volume-dag-airflow:
  ingestion-volume-dags:
  ingestion-volume-tmp:
  es-data:
  postgres-db-volume:
  pypi-server:
  mlrun_data:
  clickhouse_data:
    driver: local
  index_data:
    driver: local
  backups:
    driver: local
  logs:
    # networks:
    #   net:
    #     driver: bridge

networks:
  app_net:
    ipam:
      driver: default
      config:
        - subnet: "172.16.240.0/24"
